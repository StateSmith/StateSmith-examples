// This is a sample test file for the LightSm state machine.
// Generated by StateSmith.
// Feel free to make a copy and start adding your own tests.

/// XXX Contributor notes are marked with XXX
/// These will not be in the final output

// This sample uses npm and jest to run tests. 
//
// To setup tests:
// - install npm if you don't already have it (https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)
// - Install the jest dev dependency: `npm install --save-dev jest`
// - edit your package.json file, see package.sample.json for an example
//   (Jest needs some light setup to work with ES6 modules for "import" and "export")
//
// To run, type `npm test` in the terminal

import {LightSm} from './LightSm.js'; // XXX generated from machine name
import {jest} from '@jest/globals';

// Mock the functions used by the state machine
// We recommend mocking rather than importing your actual functions,
// to keep these tests purely about testing the state machine itself.
// Your implementations should also be tested, but in separate tests.
// XXX generated from the list of functions called by the machine.
// XXX may be dependent on zero-config feature
globalThis.println = jest.fn();
globalThis.light_blue = jest.fn();
globalThis.light_yellow = jest.fn();
globalThis.light_red = jest.fn();

// Use "stateId" to access the current state of the state machine, eg.
// expect(sm.stateId).toBe(LightSm.StateId.OFF);
//
// Use "vars" to access the variables of the state machine, eg.
// expect(sm.vars.myVar).toBe(42);
//
// Use "dispatchEvent" to send events to the state machine, eg.
// sm.dispatchEvent(LightSm.EventId.INCREASE);
//
// Use mock functions to check if the functions are called, eg.
// expect(globalThis.println.mock.calls).toHaveLength(1);
// See https://jestjs.io/ for more information on Jest
//
// XXX variable names can be generated from the machine
// XXX in the examples above to be extra slick


beforeEach(() => {
    jest.clearAllMocks();
});

test('starts in the off state', () => {
    const sm = new LightSm();
    sm.start();
    expect(sm.stateId).toBe(LightSm.StateId.OFF); // XXX generated from initial state name
});
