// Autogenerated with StateSmith 0.12.0-alpha+99dbe30d387ec88bb0e251bea536ac8980235987.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

    
#pragma once
#include <stdint.h>

    
typedef enum LightSm_EventId
{
    LightSm_EventId_DIM = 0,
    LightSm_EventId_INC = 1,
} LightSm_EventId;

enum
{
    LightSm_EventIdCount = 2
};

typedef enum LightSm_StateId
{
    LightSm_StateId_ROOT = 0,
    LightSm_StateId_OFF = 1,
    LightSm_StateId_ON1 = 2,
    LightSm_StateId_ON2 = 3,
    LightSm_StateId_ON3 = 4,
} LightSm_StateId;

enum
{
    LightSm_StateIdCount = 5
};


// Generated state machine
// forward declaration
typedef struct LightSm LightSm;

// event handler type
typedef void (*LightSm_Func)(LightSm* sm);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void LightSm_ctor(LightSm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void LightSm_start(LightSm* sm);

// Dispatches an event to the state machine. Not thread safe.
void LightSm_dispatch_event(LightSm* sm, LightSm_EventId event_id);

// Thread safe.
char const * LightSm_state_id_to_string(LightSm_StateId id);

// Thread safe.
char const * LightSm_event_id_to_string(LightSm_EventId id);

// Generated state machine
struct LightSm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    LightSm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    LightSm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    LightSm_Func current_event_handlers[LightSm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    LightSm_Func current_state_exit_handler;
};

