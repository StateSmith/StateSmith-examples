#!/usr/bin/env dotnet-script
// This is a c# script file

#r "nuget: StateSmith, 0.9.13-alpha-tracking-expander-2" // this line specifies which version of StateSmith to use and download from c# nuget web service.

using StateSmith.Input.Expansions;
using StateSmith.Output.UserConfig;
using StateSmith.Runner;
using StateSmith.SmGraph;  // Note using! This is required to access StateMachine and NamedVertex classes...
using StateSmith.SmGraph.Visitors;
using StateSmith.Common;
var trackingExpander = new TrackingExpander();
TextWriter mermaidCodeWriter = new StringWriter();
TextWriter mocksWriter = new StringWriter();
SmRunner htmlRunner = new(diagramPath: "LightSm.drawio.svg", new LightSmRenderConfig(), transpilerId: TranspilerId.JavaScript);
htmlRunner.GetExperimentalAccess().DiServiceProvider.AddSingletonT<IExpander>(trackingExpander); // must be done before AddPipelineStep();
htmlRunner.SmTransformer.InsertBeforeFirstMatch(
    StandardSmTransformer.TransformationId.Standard_FinalValidation,
    new TransformationStep(id: "some string id", action: (sm) =>
    {
        var visitor = new MermaidGenerator(mermaidCodeWriter);
        sm.Accept(visitor);
        visitor.Print(); // print the mermaid code to the mermaidcodewriter
    }));
htmlRunner.Run();

mocksWriter.WriteLine(
    """
    // Mocks of functions referenced by your state machine.
    """
);
foreach (var funcAttempt in trackingExpander.AttemptedFunctionExpansions)
{
    mocksWriter.WriteLine(
        $$"""globalThis.{{funcAttempt}} = ()=>{ addHistoryRow(new Date(), "Called {{funcAttempt}}()");};""");
}

using(StreamWriter htmlWriter = new StreamWriter($"LightSm.html")) {
    PrintHtml(htmlWriter,"LightSm", mocksWriter.ToString(), mermaidCodeWriter.ToString());
}



// HACK order is important, the jsRunner must run after the htmlRunner, because the htmlRunner
// also generate js (but without the logging transforms), and the jsRunner must be the last to write
SmRunner jsRunner = new(diagramPath: "LightSm.drawio.svg", new LightSmRenderConfig(), transpilerId: TranspilerId.JavaScript);
jsRunner.SmTransformer.InsertBeforeFirstMatch(StandardSmTransformer.TransformationId.Standard_Validation1, 
                                            new TransformationStep(id: "my custom step blah", LoggingTransformationStep));
jsRunner.Run();



void PrintHtml(TextWriter writer,  string smName, string mocksCode, string mermaidCode) {

    string htmlTemplate = $$"""
<!-- 
  -- This file was generated by StateSmith.
  -- It serves as an example of how to use the generated state machine in a web page.
  -- It also serves as an interactive console that you can use to validate the
  -- state machine's behavior.
  --
  -- Using {{smName}}.js generally looks like:
  --   var sm = new {{smName}}();
  --   sm.start();
  --
  -- And then using sm.dispatchEvent() to dispatch events to the state machine.
  -->
<html>
  <head>
    <style>
      body {
        display: flex;
        flex-direction: row;
      }

      .main {
        flex: 1;
        overflow: auto;
        padding: 10px;
      }

      .sidebar {
        background-color: #f0f0f0;
        border-left: 1px solid #ccc;
        display: flex;
        flex-direction: column;
        width: 300px;
      }

      #buttons {
        display: flex;
        flex-direction: column;
      }

      .console {
        border-collapse: collapse;
        margin-top: 10px;
        width: 100%;
      }

      .console th {
        background-color: #f0f0f0;
        border-bottom: 1px solid #ccc;
        font-weight: normal;
        padding: 5px;
        text-align: left;
      }

      .console td {
        border-bottom: 1px solid #ccc;
        padding: 5px;
      }

      .console tr:last-child td {
        border-bottom: none;
      }

      button {
        margin: 5px;
      }
    </style>
  </head>

  <body>
    <div class="main">
        <pre class="mermaid">
{{mermaidCode}}
        </pre>
    </div>

    <div class="sidebar">
        <div id="buttons"></div>

        <table class="console">
        <thead>
            <tr>
                <th>Time</th>
                <th>Event</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
        </table>
    </div>

    <script src="{{smName}}.js"></script>
    <script type="module">
        import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
        import svgPanZoom from 'https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/+esm' ;
        mermaid.initialize({ startOnLoad: false });
        await mermaid.run();

        // svg-pan-zoom doesn't like the mermaid viewbox
        document.querySelector('svg').removeAttribute('viewBox');
        document.querySelector('svg').setAttribute('width', '100%');
        document.querySelector('svg').setAttribute('height', '100%');
        document.querySelector('svg').style["max-width"] = '';

        svgPanZoom(document.querySelector('svg'), {
            zoomEnabled: true,
            controlIconsEnabled: true,
            fit: true,
            center: true
        });

{{mocksCode}}

        // Convert a date to a string in the format HH:MM:SS.sss
        function formatTime(date) {
            return date.getHours().toString().padStart(2, '0') + ':' +
                date.getMinutes().toString().padStart(2, '0') + ':' +
                date.getSeconds().toString().padStart(2, '0') + '.' +
                date.getMilliseconds().toString().padStart(3, '0');
        }

        // Add a row to the history table.
        function addHistoryRow(time, event) {
            var row = document.createElement('tr');
            var timeCell = document.createElement('td');
            timeCell.innerText = formatTime(time);
            var eventCell = document.createElement('td');
            eventCell.innerText = event;
            row.appendChild(timeCell);
            row.appendChild(eventCell);
            document.querySelector('tbody').appendChild(row);
        }

        var sm = new {{smName}}();

        // The simulator uses a tracer callback to perform operations such as 
        // state highlighting and logging. You do not need this functionality
        // when using {{smName}}.js in your own applications, although you may
        // choose to implement a tracer for debugging purposes.
        sm.tracer = {
            enterState: (stateId) => {
                var name = {{smName}}.stateIdToString(stateId);
                document.querySelector('g[data-id=' + name + ']')?.classList.add('active');
                addHistoryRow(new Date(), "Entered " + name);
            },
            exitState: (stateId) => {
                var name = {{smName}}.stateIdToString(stateId);
                document.querySelector('g[data-id=' + name + ']')?.classList.remove('active');
            }
        };

        // Wire up the buttons that dispatch events for the state machine.
        for (const eventName in {{smName}}.EventId) {
            var button = document.createElement('button');
            button.id = 'button_' + eventName;
            button.innerText = eventName;
            button.addEventListener('click', () => {
                addHistoryRow(new Date(), "Dispatched " + eventName);
                sm.dispatchEvent({{smName}}.EventId[eventName]); 
            });
            document.getElementById('buttons').appendChild(button);
        }

        sm.start();
    </script>


  </body>
</html>
""";

    writer.WriteLine(htmlTemplate);
}





void LoggingTransformationStep(StateMachine sm)
{
    // The below code will visit all states in the state machine and add custom enter and exit behaviors.
    sm.VisitTypeRecursively<State>((State state) =>
    {
        state.AddEnterAction($"this.tracer?.enterState({sm.Name}.StateId.{state.Name});", index:0); // use index to insert at start
        state.AddExitAction($"this.tracer?.exitState({sm.Name}.StateId.{state.Name});");
    });
}





// TODO it might be more straightforward to iterate over the graph directly instead of using a visitor
class MermaidGenerator : IVertexVisitor
{
    private int indentCount = 0;
    private HashSet<Vertex> leafNodes = new();
    private HashSet<Vertex> compositeNodes = new();
    private TextWriter writer;

    public MermaidGenerator(TextWriter writer)
    {
        this.writer = writer;
    }


    // Format for regular state:
    //   OFF : title
    //   OFF : first line
    //   OFF : second line
    //
    // Format for composite state (multiple lines not supported):
    //   state OFF {
    //    ...
    //   }
    //
    // Transitions must be first
    // Then regular states
    // Then composite states
    //
    // At least that the order that seems to be working best on my test models
    // https://github.com/mermaid-js/mermaid/issues/5522
    public void Print() {
        Print("stateDiagram");
        Print("classDef active fill:yellow,stroke-width:2px;");
        Print("");
        foreach (var node in leafNodes.Concat(compositeNodes)) {
            PrintTransitions(node);
        }
        foreach (var node in leafNodes) {
            PrintLeafNode(node);
        }
        foreach (var node in compositeNodes) {
            PrintCompositeNode(node);
        }
    }


    private void PrintLeafNode(Vertex v) {
        if( v is NamedVertex ) {
            string name = ((NamedVertex)v).Name;
            Print($"{name} : {name}");
            foreach(var b in v.Behaviors.Where(b => b.TransitionTarget==null)) {
                string text = MermaidEscape(b.ToString());
                Print($"{name} : {text}");
            }
            Print("");
        }
    }

    // TODO handle #
    // You can't naively add # to the list of characters because # and ; will interfere with each other
    private string MermaidEscape(string text) {
        foreach( char c in ";\\{}".ToCharArray()) {
            text = text.Replace(c.ToString(), $"#{(int)c};");
        }
        return text;
    }

    private void PrintCompositeNode(Vertex v) {
        if( !(v is NamedVertex) ) {
            throw new Exception("Composite node must be named");
        }

        Print($"state {((NamedVertex)v).Name} {{");
        indentCount++;
        foreach (var child in v.Children)
        {
            if(child is NamedVertex) {
                Print(((NamedVertex)child).Name);
            }
        }
        indentCount--;
        Print("}");
        Print("");
    }

    private void PrintTransitions(Vertex v) {
        foreach (var behavior in v.Behaviors)
        {
            if(behavior.TransitionTarget!=null) {
                string start = v is NamedVertex ? ((NamedVertex)v).Name : "[*]";
                string end = behavior.TransitionTarget is NamedVertex ? ((NamedVertex)behavior.TransitionTarget).Name : "[*]";
                Print($"{start} --> {end}");
            }
        }
        Print("");
    }

    private void Print(string message)
    {
        for (int i = 0; i < indentCount; i++)
        {
            writer.Write("  ");
        }
        writer.WriteLine(message);
    }

    private void VisitChildren(Vertex v)
    {
        foreach (var child in v.Children)
        {
            child.Accept(this);
        }
    }

    private void AssertNoChildren(Vertex v)
    {
        if (v.Children.Count > 0)
        {
            throw new Exception($"Vertex `{Vertex.Describe(v)}` not expected to have children");
        }
    }

    public void Visit(Vertex v)
    {
        throw new NotImplementedException();
    }

    public void Visit(StateMachine v)
    {
        VisitChildren(v);
    }

    public void Visit(NamedVertex v)
    {
        VisitChildren(v);
    }

    public void Visit(State v)
    {
        if(v.Children.Count > 0) {
            compositeNodes.Add(v);
            VisitChildren(v);
        } else {
            leafNodes.Add(v);
        }
    }

    // orthogonal states are not yet implemented, but will be one day
    public void Visit(OrthoState v)
    {
        throw new NotImplementedException();
    }

    public void Visit(NotesVertex v)
    {
        throw new NotImplementedException();
    }

    public void Visit(InitialState v)
    {
        AssertNoChildren(v);
    }

    public void Visit(ChoicePoint v)
    {
        throw new NotImplementedException();
    }

    public void Visit(EntryPoint v)
    {
        throw new NotImplementedException();
    }

    public void Visit(ExitPoint v)
    {
        throw new NotImplementedException();
    }

    public void Visit(HistoryVertex v)
    {
        throw new NotImplementedException();
    }

    public void Visit(HistoryContinueVertex v)
    {
        throw new NotImplementedException();
    }

    public void Visit(RenderConfigVertex v)
    {
        // just ignore render config and any children
    }

    public void Visit(ConfigOptionVertex v)
    {
        // just ignore config option and any children
    }

    private void VisitBehaviors(Vertex v)
    {
        foreach (var behavior in v.Behaviors)
        {
            if(behavior.TransitionTarget!=null) {
                string start = v is NamedVertex ? ((NamedVertex)v).Name : "[*]";
                string end = behavior.TransitionTarget is NamedVertex ? ((NamedVertex)behavior.TransitionTarget).Name : "[*]";
                
                Print($"{start} --> {end}");
            }
        }
    }
}





public class LightSmRenderConfig : IRenderConfigJavaScript
{

    string IRenderConfig.AutoExpandedVars => """
        count: 0 // variable for state machine
        """;

    string IRenderConfigJavaScript.ClassCode => """        
        // var tracer = null;
    """;


    // This nested class creates expansions. It can have any name.
    public class MyExpansions : UserExpansionScriptBase
    {
        // public string light_blue()   => """std::cout << "BLUE\n";""";
        // public string light_yellow() => """std::cout << "YELL-OH\n";""";
        // public string light_red()    => """std::cout << "RED\n";""";
    }
}

