// Autogenerated with StateSmith 0.9.0-alpha-dev-1.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class MySm
{
    static EventId = 
    {
        DIM1 : 0,
        DIM2 : 1,
        ERR : 2,
        INC1 : 3,
        INC2 : 4,
        INCITE_RESET : 5,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 6;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        ERR : 1,
        NORMAL : 2,
        OFF : 3,
        ON1 : 4,
        ON2 : 5,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 6;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(MySm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.InitialState)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.InitialState`.
            // ROOT.InitialState is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.InitialState behavior
            // uml: TransitionTo(NORMAL)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `NORMAL`.
                this.#NORMAL_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.#NORMAL_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for ROOT.InitialState
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[MySm.EventId.DIM1] = this.#ROOT_dim1;
        this.#currentEventHandlers[MySm.EventId.DIM2] = this.#ROOT_dim2;
        this.#currentEventHandlers[MySm.EventId.ERR] = this.#ROOT_err;
        this.#currentEventHandlers[MySm.EventId.INC1] = this.#ROOT_inc1;
        this.#currentEventHandlers[MySm.EventId.INC2] = this.#ROOT_inc2;
        this.#currentEventHandlers[MySm.EventId.INCITE_RESET] = this.#ROOT_incite_reset;
    }
    
    #ROOT_exit()
    {
    }
    
    #ROOT_dim1()
    {
        // No ancestor state handles `dim1` event.
        
        // ROOT behavior
        // uml: (ERR, INC1, INC2, DIM1, DIM2, INCITE_RESET) / { log_unhandled_event(); }
        {
            // Step 1: execute action `log_unhandled_event();`
            log_unhandled_event("dim1");
            
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for ROOT
    }
    
    #ROOT_dim2()
    {
        // No ancestor state handles `dim2` event.
        
        // ROOT behavior
        // uml: (ERR, INC1, INC2, DIM1, DIM2, INCITE_RESET) / { log_unhandled_event(); }
        {
            // Step 1: execute action `log_unhandled_event();`
            log_unhandled_event("dim2");
            
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for ROOT
    }
    
    #ROOT_err()
    {
        // No ancestor state handles `err` event.
        
        // ROOT behavior
        // uml: (ERR, INC1, INC2, DIM1, DIM2, INCITE_RESET) / { log_unhandled_event(); }
        {
            // Step 1: execute action `log_unhandled_event();`
            log_unhandled_event("err");
            
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for ROOT
    }
    
    #ROOT_inc1()
    {
        // No ancestor state handles `inc1` event.
        
        // ROOT behavior
        // uml: (ERR, INC1, INC2, DIM1, DIM2, INCITE_RESET) / { log_unhandled_event(); }
        {
            // Step 1: execute action `log_unhandled_event();`
            log_unhandled_event("inc1");
            
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for ROOT
    }
    
    #ROOT_inc2()
    {
        // No ancestor state handles `inc2` event.
        
        // ROOT behavior
        // uml: (ERR, INC1, INC2, DIM1, DIM2, INCITE_RESET) / { log_unhandled_event(); }
        {
            // Step 1: execute action `log_unhandled_event();`
            log_unhandled_event("inc2");
            
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for ROOT
    }
    
    #ROOT_incite_reset()
    {
        // No ancestor state handles `incite_reset` event.
        
        // ROOT behavior
        // uml: (ERR, INC1, INC2, DIM1, DIM2, INCITE_RESET) / { log_unhandled_event(); }
        {
            // Step 1: execute action `log_unhandled_event();`
            log_unhandled_event("incite_reset");
            
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for ROOT
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ERR
    ////////////////////////////////////////////////////////////////////////////////
    
    #ERR_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ERR_exit;
        this.#currentEventHandlers[MySm.EventId.DIM1] = this.#ERR_dim1;
        this.#currentEventHandlers[MySm.EventId.DIM2] = this.#ERR_dim2;
        this.#currentEventHandlers[MySm.EventId.INC1] = this.#ERR_inc1;
        this.#currentEventHandlers[MySm.EventId.INC2] = this.#ERR_inc2;
        this.#currentEventHandlers[MySm.EventId.INCITE_RESET] = this.#ERR_incite_reset;
        
        // ERR behavior
        // uml: enter / { set_state("ERR"); }
        {
            // Step 1: execute action `set_state("ERR");`
            set_state("ERR");
        } // end of behavior for ERR
    }
    
    #ERR_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[MySm.EventId.DIM1] = this.#ROOT_dim1;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.DIM2] = this.#ROOT_dim2;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.INC1] = this.#ROOT_inc1;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.INC2] = this.#ROOT_inc2;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.INCITE_RESET] = this.#ROOT_incite_reset;  // the next ancestor that handles this event is ROOT
    }
    
    #ERR_dim1()
    {
        // Setup handler for next ancestor that listens to `dim1` event.
        this.#ancestorEventHandler = this.#ROOT_dim1;
        
        // ERR behavior
        // uml: (DIM1, INC1, DIM2, INC2) / { beep(); }
        {
            // Step 1: execute action `beep();`
            beep();
            
            // Step 2: determine if ancestor gets to handle event next.
            this.#ancestorEventHandler = null;  // consume event
        } // end of behavior for ERR
    }
    
    #ERR_dim2()
    {
        // Setup handler for next ancestor that listens to `dim2` event.
        this.#ancestorEventHandler = this.#ROOT_dim2;
        
        // ERR behavior
        // uml: (DIM1, INC1, DIM2, INC2) / { beep(); }
        {
            // Step 1: execute action `beep();`
            beep();
            
            // Step 2: determine if ancestor gets to handle event next.
            this.#ancestorEventHandler = null;  // consume event
        } // end of behavior for ERR
    }
    
    #ERR_inc1()
    {
        // Setup handler for next ancestor that listens to `inc1` event.
        this.#ancestorEventHandler = this.#ROOT_inc1;
        
        // ERR behavior
        // uml: (DIM1, INC1, DIM2, INC2) / { beep(); }
        {
            // Step 1: execute action `beep();`
            beep();
            
            // Step 2: determine if ancestor gets to handle event next.
            this.#ancestorEventHandler = null;  // consume event
        } // end of behavior for ERR
    }
    
    #ERR_inc2()
    {
        // Setup handler for next ancestor that listens to `inc2` event.
        this.#ancestorEventHandler = this.#ROOT_inc2;
        
        // ERR behavior
        // uml: (DIM1, INC1, DIM2, INC2) / { beep(); }
        {
            // Step 1: execute action `beep();`
            beep();
            
            // Step 2: determine if ancestor gets to handle event next.
            this.#ancestorEventHandler = null;  // consume event
        } // end of behavior for ERR
    }
    
    #ERR_incite_reset()
    {
        // Setup handler for next ancestor that listens to `incite_reset` event.
        this.#ancestorEventHandler = this.#ROOT_incite_reset;
        
        // ERR behavior
        // uml: INCITE_RESET TransitionTo(NORMAL)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#ERR_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NORMAL`.
            this.#NORMAL_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#NORMAL_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for ERR
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NORMAL
    ////////////////////////////////////////////////////////////////////////////////
    
    #NORMAL_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#NORMAL_exit;
        this.#currentEventHandlers[MySm.EventId.ERR] = this.#NORMAL_err;
    }
    
    #NORMAL_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[MySm.EventId.ERR] = this.#ROOT_err;  // the next ancestor that handles this event is ROOT
    }
    
    #NORMAL_err()
    {
        // Setup handler for next ancestor that listens to `err` event.
        this.#ancestorEventHandler = this.#ROOT_err;
        
        // NORMAL behavior
        // uml: ERR TransitionTo(ERR)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ERR`.
            this.#ERR_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.ERR;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for NORMAL
    }
    
    #NORMAL_InitialState_transition()
    {
        // NORMAL.InitialState behavior
        // uml: TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            this.#OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.OFF;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for NORMAL.InitialState
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OFF
    ////////////////////////////////////////////////////////////////////////////////
    
    #OFF_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#OFF_exit;
        this.#currentEventHandlers[MySm.EventId.INC1] = this.#OFF_inc1;
        this.#currentEventHandlers[MySm.EventId.INC2] = this.#OFF_inc2;
        
        // OFF behavior
        // uml: enter / { set_state("OFF"); }
        {
            // Step 1: execute action `set_state("OFF");`
            set_state("OFF");
        } // end of behavior for OFF
    }
    
    #OFF_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#NORMAL_exit;
        this.#currentEventHandlers[MySm.EventId.INC1] = this.#ROOT_inc1;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.INC2] = this.#ROOT_inc2;  // the next ancestor that handles this event is ROOT
    }
    
    #OFF_inc1()
    {
        // Setup handler for next ancestor that listens to `inc1` event.
        this.#ancestorEventHandler = this.#ROOT_inc1;
        
        // OFF behavior
        // uml: INC1 TransitionTo(ON1)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.#OFF_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON1`.
            this.#ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.ON1;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for OFF
    }
    
    #OFF_inc2()
    {
        // Setup handler for next ancestor that listens to `inc2` event.
        this.#ancestorEventHandler = this.#ROOT_inc2;
        
        // OFF behavior
        // uml: INC2 TransitionTo(ON2)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.#OFF_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON2`.
            this.#ON2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.ON2;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for OFF
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON1
    ////////////////////////////////////////////////////////////////////////////////
    
    #ON1_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ON1_exit;
        this.#currentEventHandlers[MySm.EventId.DIM1] = this.#ON1_dim1;
        this.#currentEventHandlers[MySm.EventId.DIM2] = this.#ON1_dim2;
        this.#currentEventHandlers[MySm.EventId.INC1] = this.#ON1_inc1;
        this.#currentEventHandlers[MySm.EventId.INC2] = this.#ON1_inc2;
        
        // ON1 behavior
        // uml: enter / { set_state("ON1"); }
        {
            // Step 1: execute action `set_state("ON1");`
            set_state("ON1");
        } // end of behavior for ON1
    }
    
    #ON1_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#NORMAL_exit;
        this.#currentEventHandlers[MySm.EventId.DIM1] = this.#ROOT_dim1;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.DIM2] = this.#ROOT_dim2;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.INC1] = this.#ROOT_inc1;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.INC2] = this.#ROOT_inc2;  // the next ancestor that handles this event is ROOT
    }
    
    #ON1_dim1()
    {
        // Setup handler for next ancestor that listens to `dim1` event.
        this.#ancestorEventHandler = this.#ROOT_dim1;
        
        // ON1 behavior
        // uml: (DIM1, DIM2) TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.#ON1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            this.#OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.OFF;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for ON1
    }
    
    #ON1_dim2()
    {
        // Setup handler for next ancestor that listens to `dim2` event.
        this.#ancestorEventHandler = this.#ROOT_dim2;
        
        // ON1 behavior
        // uml: (DIM1, DIM2) TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.#ON1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            this.#OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.OFF;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for ON1
    }
    
    #ON1_inc1()
    {
        // Setup handler for next ancestor that listens to `inc1` event.
        this.#ancestorEventHandler = this.#ROOT_inc1;
        
        // ON1 behavior
        // uml: (INC1, INC2) TransitionTo(ON2)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.#ON1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON2`.
            this.#ON2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.ON2;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for ON1
    }
    
    #ON1_inc2()
    {
        // Setup handler for next ancestor that listens to `inc2` event.
        this.#ancestorEventHandler = this.#ROOT_inc2;
        
        // ON1 behavior
        // uml: (INC1, INC2) TransitionTo(ON2)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.#ON1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON2`.
            this.#ON2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.ON2;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for ON1
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON2
    ////////////////////////////////////////////////////////////////////////////////
    
    #ON2_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ON2_exit;
        this.#currentEventHandlers[MySm.EventId.DIM1] = this.#ON2_dim1;
        this.#currentEventHandlers[MySm.EventId.DIM2] = this.#ON2_dim2;
        
        // ON2 behavior
        // uml: enter / { set_state("ON2"); }
        {
            // Step 1: execute action `set_state("ON2");`
            set_state("ON2");
        } // end of behavior for ON2
    }
    
    #ON2_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#NORMAL_exit;
        this.#currentEventHandlers[MySm.EventId.DIM1] = this.#ROOT_dim1;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[MySm.EventId.DIM2] = this.#ROOT_dim2;  // the next ancestor that handles this event is ROOT
    }
    
    #ON2_dim1()
    {
        // Setup handler for next ancestor that listens to `dim1` event.
        this.#ancestorEventHandler = this.#ROOT_dim1;
        
        // ON2 behavior
        // uml: DIM1 TransitionTo(ON1)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.#ON2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON1`.
            this.#ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.ON1;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for ON2
    }
    
    #ON2_dim2()
    {
        // Setup handler for next ancestor that listens to `dim2` event.
        this.#ancestorEventHandler = this.#ROOT_dim2;
        
        // ON2 behavior
        // uml: DIM2 TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `NORMAL` state (Least Common Ancestor for transition).
            this.#ON2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            this.#OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MySm.StateId.OFF;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for ON2
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case MySm.StateId.ROOT: return "ROOT";
            case MySm.StateId.ERR: return "ERR";
            case MySm.StateId.NORMAL: return "NORMAL";
            case MySm.StateId.OFF: return "OFF";
            case MySm.StateId.ON1: return "ON1";
            case MySm.StateId.ON2: return "ON2";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case MySm.EventId.DIM1: return "DIM1";
            case MySm.EventId.DIM2: return "DIM2";
            case MySm.EventId.ERR: return "ERR";
            case MySm.EventId.INC1: return "INC1";
            case MySm.EventId.INC2: return "INC2";
            case MySm.EventId.INCITE_RESET: return "INCITE_RESET";
            default: return "?";
        }
    }
}
