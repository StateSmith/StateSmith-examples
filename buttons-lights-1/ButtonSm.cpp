// Autogenerated with StateSmith 0.9.10-alpha+1f83cb59adcabe0a5a4c8d3e0421027761c28974.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#include "ButtonSm.hpp"
#include "Arduino.h"
#include <stdbool.h> // required for `consume_event` flag
#include <string.h> // for memset

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
static void exit_up_to_state_handler(ButtonSm* sm, ButtonSm_Func desired_state_exit_handler);

static void ROOT_enter(ButtonSm* sm);

static void ROOT_exit(ButtonSm* sm);

static void NOT_PRESSED_enter(ButtonSm* sm);

static void NOT_PRESSED_exit(ButtonSm* sm);

static void NOT_PRESSED_do(ButtonSm* sm);

static void PRESSED_enter(ButtonSm* sm);

static void PRESSED_exit(ButtonSm* sm);

static void PRESSED_do(ButtonSm* sm);

static void CONFIRMING_LONG_enter(ButtonSm* sm);

static void CONFIRMING_LONG_exit(ButtonSm* sm);

static void CONFIRMING_LONG_do(ButtonSm* sm);

static void LONG_PRESS_enter(ButtonSm* sm);

static void LONG_PRESS_exit(ButtonSm* sm);


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void ButtonSm_ctor(ButtonSm* sm)
{
    memset(sm, 0, sizeof(*sm));
}

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void ButtonSm_start(ButtonSm* sm)
{
    ROOT_enter(sm);
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: TransitionTo(NOT_PRESSED)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `NOT_PRESSED`.
            NOT_PRESSED_enter(sm);
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            sm->state_id = ButtonSm_StateId_NOT_PRESSED;
            // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
            return;
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
void ButtonSm_dispatch_event(ButtonSm* sm, ButtonSm_EventId event_id)
{
    ButtonSm_Func behavior_func = sm->current_event_handlers[event_id];
    
    while (behavior_func != NULL)
    {
        sm->ancestor_event_handler = NULL;
        behavior_func(sm);
        behavior_func = sm->ancestor_event_handler;
    }
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
static void exit_up_to_state_handler(ButtonSm* sm, ButtonSm_Func desired_state_exit_handler)
{
    while (sm->current_state_exit_handler != desired_state_exit_handler)
    {
        sm->current_state_exit_handler(sm);
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

static void ROOT_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = ROOT_exit;
}

static void ROOT_exit(ButtonSm* sm)
{
    // State machine root is a special case. It cannot be exited. Mark as unused.
    (void)sm;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state NOT_PRESSED
////////////////////////////////////////////////////////////////////////////////

static void NOT_PRESSED_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = NOT_PRESSED_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = NOT_PRESSED_do;
    
    // NOT_PRESSED behavior
    // uml: enter / { reset_timer(); }
    {
        // Step 1: execute action `reset_timer();`
        sm->vars.timer_started_at_ms = millis();
    } // end of behavior for NOT_PRESSED
}

static void NOT_PRESSED_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = NULL;  // no ancestor listens to this event
}

static void NOT_PRESSED_do(ButtonSm* sm)
{
    // No ancestor state handles `do` event.
    
    // NOT_PRESSED behavior
    // uml: do [is_pressed \n  && is_debounced] TransitionTo(PRESSED)
    if (sm->vars.input_is_pressed 
  && ((millis() - sm->vars.timer_started_at_ms) >= 100))
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        NOT_PRESSED_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `PRESSED`.
        PRESSED_enter(sm);
        
        // PRESSED.<InitialState> behavior
        // uml: TransitionTo(CONFIRMING_LONG)
        {
            // Step 1: Exit states until we reach `PRESSED` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CONFIRMING_LONG`.
            CONFIRMING_LONG_enter(sm);
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            sm->state_id = ButtonSm_StateId_CONFIRMING_LONG;
            // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
            return;
        } // end of behavior for PRESSED.<InitialState>
    } // end of behavior for NOT_PRESSED
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state PRESSED
////////////////////////////////////////////////////////////////////////////////

static void PRESSED_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = PRESSED_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_do;
    
    // PRESSED behavior
    // uml: enter / { reset_timer();\noutput_event(press); }
    {
        // Step 1: execute action `reset_timer();\noutput_event(press);`
        sm->vars.timer_started_at_ms = millis();
        sm->vars.output_event_press = true;
    } // end of behavior for PRESSED
}

static void PRESSED_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = NULL;  // no ancestor listens to this event
}

static void PRESSED_do(ButtonSm* sm)
{
    // No ancestor state handles `do` event.
    
    // PRESSED behavior
    // uml: do [is_released && is_debounced] / { output_event(release); } TransitionTo(NOT_PRESSED)
    if ((!sm->vars.input_is_pressed) && ((millis() - sm->vars.timer_started_at_ms) >= 100))
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        exit_up_to_state_handler(sm, ROOT_exit);
        
        // Step 2: Transition action: `output_event(release);`.
        sm->vars.output_event_release = true;
        
        // Step 3: Enter/move towards transition target `NOT_PRESSED`.
        NOT_PRESSED_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = ButtonSm_StateId_NOT_PRESSED;
        // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
        return;
    } // end of behavior for PRESSED
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state CONFIRMING_LONG
////////////////////////////////////////////////////////////////////////////////

static void CONFIRMING_LONG_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = CONFIRMING_LONG_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = CONFIRMING_LONG_do;
}

static void CONFIRMING_LONG_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = PRESSED_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_do;  // the next ancestor that handles this event is PRESSED
}

static void CONFIRMING_LONG_do(ButtonSm* sm)
{
    // Setup handler for next ancestor that listens to `do` event.
    sm->ancestor_event_handler = PRESSED_do;
    
    // CONFIRMING_LONG behavior
    // uml: do [timer_ms > 800] TransitionTo(LONG_PRESS)
    if ((millis() - sm->vars.timer_started_at_ms) > 800)
    {
        // Step 1: Exit states until we reach `PRESSED` state (Least Common Ancestor for transition).
        CONFIRMING_LONG_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `LONG_PRESS`.
        LONG_PRESS_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = ButtonSm_StateId_LONG_PRESS;
        sm->ancestor_event_handler = NULL;
        return;
    } // end of behavior for CONFIRMING_LONG
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state LONG_PRESS
////////////////////////////////////////////////////////////////////////////////

static void LONG_PRESS_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = LONG_PRESS_exit;
    
    // LONG_PRESS behavior
    // uml: enter / { output_event(long); }
    {
        // Step 1: execute action `output_event(long);`
        sm->vars.output_event_long = true;
    } // end of behavior for LONG_PRESS
}

static void LONG_PRESS_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = PRESSED_exit;
}

// Thread safe.
char const * ButtonSm_state_id_to_string(ButtonSm_StateId id)
{
    switch (id)
    {
        case ButtonSm_StateId_ROOT: return "ROOT";
        case ButtonSm_StateId_NOT_PRESSED: return "NOT_PRESSED";
        case ButtonSm_StateId_PRESSED: return "PRESSED";
        case ButtonSm_StateId_CONFIRMING_LONG: return "CONFIRMING_LONG";
        case ButtonSm_StateId_LONG_PRESS: return "LONG_PRESS";
        default: return "?";
    }
}

// Thread safe.
char const * ButtonSm_event_id_to_string(ButtonSm_EventId id)
{
    switch (id)
    {
        case ButtonSm_EventId_DO: return "DO";
        default: return "?";
    }
}
