// Autogenerated with StateSmith 0.9.2-alpha.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class MarioSm
{
    static EventId = 
    {
        FEATHER : 0,
        FIRE_FLOWER : 1,
        HIT : 2,
        MUSHROOM : 3,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 4;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        LARGE : 1,
        CAPE : 2,
        FIRE : 3,
        SUPER : 4,
        SMALL : 5,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 6;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(MarioSm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.InitialState)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.InitialState`.
            // ROOT.InitialState is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.InitialState behavior
            // uml: TransitionTo(SMALL)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `SMALL`.
                this.#SMALL_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = MarioSm.StateId.SMALL;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for ROOT.InitialState
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    #ROOT_exit()
    {
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state LARGE
    ////////////////////////////////////////////////////////////////////////////////
    
    #LARGE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#LARGE_exit;
        this.#currentEventHandlers[MarioSm.EventId.HIT] = this.#LARGE_hit;
    }
    
    #LARGE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[MarioSm.EventId.HIT] = null;  // no ancestor listens to this event
    }
    
    #LARGE_hit()
    {
        // No ancestor state handles `hit` event.
        
        // LARGE behavior
        // uml: HIT TransitionTo(SMALL)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SMALL`.
            this.#SMALL_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.SMALL;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for LARGE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CAPE
    ////////////////////////////////////////////////////////////////////////////////
    
    #CAPE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CAPE_exit;
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = this.#CAPE_fire_flower;
        this.#currentEventHandlers[MarioSm.EventId.HIT] = this.#CAPE_hit;
        
        // CAPE behavior
        // uml: enter / { code(); }
        {
            // Step 1: execute action `code();`
            code();
        } // end of behavior for CAPE
    }
    
    #CAPE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#LARGE_exit;
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.HIT] = this.#LARGE_hit;  // the next ancestor that handles this event is LARGE
    }
    
    #CAPE_fire_flower()
    {
        // No ancestor state handles `fire_flower` event.
        
        // CAPE behavior
        // uml: FIRE_FLOWER TransitionTo(FIRE)
        {
            // Step 1: Exit states until we reach `LARGE` state (Least Common Ancestor for transition).
            this.#CAPE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `FIRE`.
            this.#FIRE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.FIRE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CAPE
    }
    
    #CAPE_hit()
    {
        // Setup handler for next ancestor that listens to `hit` event.
        this.#ancestorEventHandler = this.#LARGE_hit;
        
        // CAPE behavior
        // uml: HIT TransitionTo(SUPER)
        {
            // Step 1: Exit states until we reach `LARGE` state (Least Common Ancestor for transition).
            this.#CAPE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SUPER`.
            this.#SUPER_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.SUPER;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for CAPE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state FIRE
    ////////////////////////////////////////////////////////////////////////////////
    
    #FIRE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#FIRE_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = this.#FIRE_feather;
        
        // FIRE behavior
        // uml: enter / { code(); }
        {
            // Step 1: execute action `code();`
            code();
        } // end of behavior for FIRE
    }
    
    #FIRE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#LARGE_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = null;  // no ancestor listens to this event
    }
    
    #FIRE_feather()
    {
        // No ancestor state handles `feather` event.
        
        // FIRE behavior
        // uml: FEATHER TransitionTo(CAPE)
        {
            // Step 1: Exit states until we reach `LARGE` state (Least Common Ancestor for transition).
            this.#FIRE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CAPE`.
            this.#CAPE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.CAPE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for FIRE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SUPER
    ////////////////////////////////////////////////////////////////////////////////
    
    #SUPER_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#SUPER_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = this.#SUPER_feather;
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = this.#SUPER_fire_flower;
        
        // SUPER behavior
        // uml: enter / { code(); }
        {
            // Step 1: execute action `code();`
            code();
        } // end of behavior for SUPER
    }
    
    #SUPER_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#LARGE_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = null;  // no ancestor listens to this event
    }
    
    #SUPER_feather()
    {
        // No ancestor state handles `feather` event.
        
        // SUPER behavior
        // uml: FEATHER TransitionTo(CAPE)
        {
            // Step 1: Exit states until we reach `LARGE` state (Least Common Ancestor for transition).
            this.#SUPER_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CAPE`.
            this.#CAPE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.CAPE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SUPER
    }
    
    #SUPER_fire_flower()
    {
        // No ancestor state handles `fire_flower` event.
        
        // SUPER behavior
        // uml: FIRE_FLOWER TransitionTo(FIRE)
        {
            // Step 1: Exit states until we reach `LARGE` state (Least Common Ancestor for transition).
            this.#SUPER_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `FIRE`.
            this.#FIRE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.FIRE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SUPER
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SMALL
    ////////////////////////////////////////////////////////////////////////////////
    
    #SMALL_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#SMALL_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = this.#SMALL_feather;
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = this.#SMALL_fire_flower;
        this.#currentEventHandlers[MarioSm.EventId.MUSHROOM] = this.#SMALL_mushroom;
        
        // SMALL behavior
        // uml: enter / { code(); }
        {
            // Step 1: execute action `code();`
            code();
        } // end of behavior for SMALL
    }
    
    #SMALL_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.MUSHROOM] = null;  // no ancestor listens to this event
    }
    
    #SMALL_feather()
    {
        // No ancestor state handles `feather` event.
        
        // SMALL behavior
        // uml: FEATHER TransitionTo(LARGE.EntryPoint(feather))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#SMALL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `LARGE.EntryPoint(feather)`.
            this.#LARGE_enter();
            // LARGE.EntryPoint(feather) is a pseudo state and cannot have an `enter` trigger.
            
            // LARGE.EntryPoint(feather) behavior
            // uml: TransitionTo(CAPE)
            {
                // Step 1: Exit states until we reach `LARGE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `CAPE`.
                this.#CAPE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = MarioSm.StateId.CAPE;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for LARGE.EntryPoint(feather)
        } // end of behavior for SMALL
    }
    
    #SMALL_fire_flower()
    {
        // No ancestor state handles `fire_flower` event.
        
        // SMALL behavior
        // uml: FIRE_FLOWER TransitionTo(LARGE.EntryPoint(fire_flower))
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#SMALL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `LARGE.EntryPoint(fire_flower)`.
            this.#LARGE_enter();
            // LARGE.EntryPoint(fire_flower) is a pseudo state and cannot have an `enter` trigger.
            
            // LARGE.EntryPoint(fire_flower) behavior
            // uml: TransitionTo(FIRE)
            {
                // Step 1: Exit states until we reach `LARGE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `FIRE`.
                this.#FIRE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = MarioSm.StateId.FIRE;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for LARGE.EntryPoint(fire_flower)
        } // end of behavior for SMALL
    }
    
    #SMALL_mushroom()
    {
        // No ancestor state handles `mushroom` event.
        
        // SMALL behavior
        // uml: MUSHROOM TransitionTo(LARGE)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#SMALL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `LARGE`.
            this.#LARGE_enter();
            
            // LARGE.InitialState behavior
            // uml: TransitionTo(SUPER)
            {
                // Step 1: Exit states until we reach `LARGE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `SUPER`.
                this.#SUPER_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = MarioSm.StateId.SUPER;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for LARGE.InitialState
        } // end of behavior for SMALL
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case MarioSm.StateId.ROOT: return "ROOT";
            case MarioSm.StateId.LARGE: return "LARGE";
            case MarioSm.StateId.CAPE: return "CAPE";
            case MarioSm.StateId.FIRE: return "FIRE";
            case MarioSm.StateId.SUPER: return "SUPER";
            case MarioSm.StateId.SMALL: return "SMALL";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case MarioSm.EventId.FEATHER: return "FEATHER";
            case MarioSm.EventId.FIRE_FLOWER: return "FIRE_FLOWER";
            case MarioSm.EventId.HIT: return "HIT";
            case MarioSm.EventId.MUSHROOM: return "MUSHROOM";
            default: return "?";
        }
    }
}
