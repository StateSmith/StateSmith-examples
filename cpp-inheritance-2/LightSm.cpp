// Autogenerated with StateSmith 0.17.1+3dba8261f1470ff8db4b6e247bff1948d68b9351.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#include "LightSm.h"
#include <stdbool.h> // required for `consume_event` flag
#include <string.h> // for memset

namespace Light
{
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void LightSm::start()
    {
        ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(OFF)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `OFF`.
                OFF_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    void LightSm::dispatchEvent(EventId eventId)
    {
        switch (this->stateId)
        {
            // STATE: LightSm
            case StateId::ROOT:
                // No events handled by this state (or its ancestors).
                break;
            
            // STATE: OFF
            case StateId::OFF:
                switch (eventId)
                {
                    case EventId::INC: OFF_inc(); break;
                    
                    default: break; // to avoid "unused enumeration value in switch" warning
                }
                break;
            
            // STATE: ON_GROUP
            case StateId::ON_GROUP:
                switch (eventId)
                {
                    case EventId::OFF: ON_GROUP_off(); break;
                    
                    default: break; // to avoid "unused enumeration value in switch" warning
                }
                break;
            
            // STATE: ON_HOT
            case StateId::ON_HOT:
                switch (eventId)
                {
                    case EventId::DIM: ON_HOT_dim(); break;
                    case EventId::OFF: ON_GROUP_off(); break; // First ancestor handler for this event
                    
                    default: break; // to avoid "unused enumeration value in switch" warning
                }
                break;
            
            // STATE: ON1
            case StateId::ON1:
                switch (eventId)
                {
                    case EventId::INC: ON1_inc(); break;
                    case EventId::DIM: ON1_dim(); break;
                    case EventId::OFF: ON_GROUP_off(); break; // First ancestor handler for this event
                    
                    default: break; // to avoid "unused enumeration value in switch" warning
                }
                break;
            
            // STATE: ON2
            case StateId::ON2:
                switch (eventId)
                {
                    case EventId::INC: ON2_inc(); break;
                    case EventId::DIM: ON2_dim(); break;
                    case EventId::OFF: ON_GROUP_off(); break; // First ancestor handler for this event
                    
                    default: break; // to avoid "unused enumeration value in switch" warning
                }
                break;
        }
        
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void LightSm::exitUpToStateHandler(StateId desiredState)
    {
        while (this->stateId != desiredState)
        {
            switch (this->stateId)
            {
                case StateId::OFF: OFF_exit(); break;
                
                case StateId::ON_GROUP: ON_GROUP_exit(); break;
                
                case StateId::ON_HOT: ON_HOT_exit(); break;
                
                case StateId::ON1: ON1_exit(); break;
                
                case StateId::ON2: ON2_exit(); break;
                
                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void LightSm::ROOT_enter()
    {
        this->stateId = StateId::ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OFF
    ////////////////////////////////////////////////////////////////////////////////
    
    void LightSm::OFF_enter()
    {
        this->stateId = StateId::OFF;
        
        // OFF behavior
        // uml: enter / { turnOff(); }
        {
            // Step 1: execute action `turnOff();`
            turnOff();
        } // end of behavior for OFF
    }
    
    void LightSm::OFF_exit()
    {
        this->stateId = StateId::ROOT;
    }
    
    void LightSm::OFF_inc()
    {
        // OFF behavior
        // uml: INC TransitionTo(ON1)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            OFF_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON1`.
            ON_GROUP_enter();
            ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for OFF
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON_GROUP
    ////////////////////////////////////////////////////////////////////////////////
    
    void LightSm::ON_GROUP_enter()
    {
        this->stateId = StateId::ON_GROUP;
    }
    
    void LightSm::ON_GROUP_exit()
    {
        this->stateId = StateId::ROOT;
    }
    
    void LightSm::ON_GROUP_off()
    {
        // ON_GROUP behavior
        // uml: OFF TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            exitUpToStateHandler(StateId::ROOT);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON_GROUP
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON_HOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void LightSm::ON_HOT_enter()
    {
        this->stateId = StateId::ON_HOT;
        
        // ON_HOT behavior
        // uml: enter / { turnRed(); }
        {
            // Step 1: execute action `turnRed();`
            turnRed();
        } // end of behavior for ON_HOT
    }
    
    void LightSm::ON_HOT_exit()
    {
        this->stateId = StateId::ON_GROUP;
    }
    
    void LightSm::ON_HOT_dim()
    {
        // ON_HOT behavior
        // uml: DIM TransitionTo(ON2)
        {
            // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
            ON_HOT_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON2`.
            ON2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON_HOT
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON1
    ////////////////////////////////////////////////////////////////////////////////
    
    void LightSm::ON1_enter()
    {
        this->stateId = StateId::ON1;
        
        // ON1 behavior
        // uml: enter / { turnBlue(); }
        {
            // Step 1: execute action `turnBlue();`
            turnBlue();
        } // end of behavior for ON1
    }
    
    void LightSm::ON1_exit()
    {
        this->stateId = StateId::ON_GROUP;
    }
    
    void LightSm::ON1_dim()
    {
        // ON1 behavior
        // uml: DIM TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            exitUpToStateHandler(StateId::ROOT);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON1
        
        // No ancestor handles this event.
    }
    
    void LightSm::ON1_inc()
    {
        // ON1 behavior
        // uml: INC TransitionTo(ON2)
        {
            // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
            ON1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON2`.
            ON2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON2
    ////////////////////////////////////////////////////////////////////////////////
    
    void LightSm::ON2_enter()
    {
        this->stateId = StateId::ON2;
        
        // ON2 behavior
        // uml: enter / { turnYellow(); }
        {
            // Step 1: execute action `turnYellow();`
            turnYellow();
        } // end of behavior for ON2
        
        // ON2 behavior
        // uml: enter / { count = 0; }
        {
            // Step 1: execute action `count = 0;`
            count = 0;
        } // end of behavior for ON2
    }
    
    void LightSm::ON2_exit()
    {
        this->stateId = StateId::ON_GROUP;
    }
    
    void LightSm::ON2_dim()
    {
        // ON2 behavior
        // uml: DIM TransitionTo(ON1)
        {
            // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
            ON2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON1`.
            ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON2
        
        // No ancestor handles this event.
    }
    
    void LightSm::ON2_inc()
    {
        // ON2 behavior
        // uml: 1. INC / { count++; }
        {
            // Step 1: execute action `count++;`
            count++;
        } // end of behavior for ON2
        
        // ON2 behavior
        // uml: 2. INC / { printCount(); }
        {
            // Step 1: execute action `printCount();`
            printCount();
        } // end of behavior for ON2
        
        // ON2 behavior
        // uml: INC [count >= 3] TransitionTo(ON_HOT)
        if (count >= 3)
        {
            // Step 1: Exit states until we reach `ON_GROUP` state (Least Common Ancestor for transition).
            ON2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ON_HOT`.
            ON_HOT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ON2
        
        // No ancestor handles this event.
    }
    
    // Thread safe.
    char const * LightSm::stateIdToString(StateId id)
    {
        switch (id)
        {
            case StateId::ROOT: return "ROOT";
            case StateId::OFF: return "OFF";
            case StateId::ON_GROUP: return "ON_GROUP";
            case StateId::ON_HOT: return "ON_HOT";
            case StateId::ON1: return "ON1";
            case StateId::ON2: return "ON2";
            default: return "?";
        }
    }
    
    // Thread safe.
    char const * LightSm::eventIdToString(EventId id)
    {
        switch (id)
        {
            case EventId::DIM: return "DIM";
            case EventId::INC: return "INC";
            case EventId::OFF: return "OFF";
            default: return "?";
        }
    }
}
