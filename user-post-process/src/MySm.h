// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

enum MySm_EventId
{
    MySm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    MySm_EventId_EV2 = 1,
    MySm_EventId_MYEV1 = 2,
};

enum
{
    MySm_EventIdCount = 3
};

enum MySm_StateId
{
    MySm_StateId_ROOT = 0,
    MySm_StateId_STATE_1 = 1,
    MySm_StateId_STATE_2 = 2,
};

enum
{
    MySm_StateIdCount = 3
};

typedef struct MySm MySm;
typedef void (*MySm_Func)(MySm* sm);

struct MySm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum MySm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    MySm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    MySm_Func current_event_handlers[MySm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    MySm_Func current_state_exit_handler;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void MySm_ctor(MySm* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void MySm_start(MySm* self);

// Dispatches an event to the state machine. Not thread safe.
void MySm_dispatch_event(MySm* self, enum MySm_EventId event_id);


// Converts an event id to a string. Thread safe.
const char* MySm_event_id_to_string(const enum MySm_EventId id);
