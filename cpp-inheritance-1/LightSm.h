// Autogenerated with StateSmith 0.17.1+3dba8261f1470ff8db4b6e247bff1948d68b9351.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/blob/main/docs/settings.md
#include <stdint.h>
#include "LightSmBase.h" // user include. required for base class.


namespace Light
{
// Generated state machine
class LightSm : public LightSmBase
{
public:
    enum class EventId: uint8_t
    {
        DIM = 0,
        INC = 1,
        OFF = 2,
    };
    
    enum
    {
        EventIdCount = 3
    };
    
    enum class StateId: uint8_t
    {
        ROOT = 0,
        OFF = 1,
        ON_GROUP = 2,
        ON_HOT = 3,
        ON1 = 4,
        ON2 = 5,
    };
    
    enum
    {
        StateIdCount = 6
    };
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    StateId stateId;
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    LightSm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void start();
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    void dispatchEvent(EventId eventId);
    
    // Thread safe.
    static char const * stateIdToString(StateId id);
    
    // Thread safe.
    static char const * eventIdToString(EventId id);


// ################################### PRIVATE MEMBERS ###################################
private:
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void exitUpToStateHandler(StateId desiredState);
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void ROOT_enter();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OFF
    ////////////////////////////////////////////////////////////////////////////////
    
    void OFF_enter();
    
    void OFF_exit();
    
    void OFF_inc();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON_GROUP
    ////////////////////////////////////////////////////////////////////////////////
    
    void ON_GROUP_enter();
    
    void ON_GROUP_exit();
    
    void ON_GROUP_off();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON_HOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void ON_HOT_enter();
    
    void ON_HOT_exit();
    
    void ON_HOT_dim();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON1
    ////////////////////////////////////////////////////////////////////////////////
    
    void ON1_enter();
    
    void ON1_exit();
    
    void ON1_dim();
    
    void ON1_inc();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON2
    ////////////////////////////////////////////////////////////////////////////////
    
    void ON2_enter();
    
    void ON2_exit();
    
    void ON2_dim();
    
    void ON2_inc();
};
}
