// NOTE!!! We don't just save the StateSmith history enumeration id integer value, because if we add/remove states
// in the future, the enumeration id integer values may change.
// Instead, we add our own mapping so that we can account for future changes to the state machine diagram.

// key used for browser local storage
const LOCAL_STORAGE_KEY = "ordering-step-state";

/**
 * Maps a storageId a state machine history enumeration id.
 */
class MappingElement {
    /** @type {any} */
    storageId;

    /** @type {number}. This value comes from autogenerated StateSmith code. */
    stateMachineHistoryId;

    constructor(storageId, stateMachineHistoryId) {
        this.storageId = storageId;
        this.stateMachineHistoryId = stateMachineHistoryId;

        // this is only needed for languages like js that are not statically checked.
        if (stateMachineHistoryId === undefined)
            throw new Error("stateMachineHistoryId is undefined for storageId '" + storageId + "'.");
    }
}

// Mapping of storage id to state machine history id.
// You could use an actual map here instead if your language supports it.
// This example is coded in a way that any language can roughly follow.
const mappingArray = [
    new MappingElement("PIZZA_BUILD", PizzaSm.PizzaSm_HistoryId.PIZZA_BUILD),
    new MappingElement("PURCHASING", PizzaSm.PizzaSm_HistoryId.PURCHASING),
    new MappingElement("ORDERED", PizzaSm.PizzaSm_HistoryId.ORDERED),
    new MappingElement("CRUST", PizzaSm.PizzaSm_HistoryId.CRUST),
    new MappingElement("TOPPINGS", PizzaSm.PizzaSm_HistoryId.TOPPINGS),
    new MappingElement("SIZE", PizzaSm.PizzaSm_HistoryId.SIZE),
];


/** @param {PizzaSm} stateMachine */
function setHistoryStateFromLocalStorage(stateMachine) {
    let storageId = getStorageId();

    // Update history state id from storage/database.
    // Must happen before `pizzaSm.start()` is called.
    stateMachine.vars.PizzaSm_history = getHistoryStateIdFromStorageId(storageId);
    // NOTE!!! The path to the history field (`.vars.PizzaSm_history`) may change when we go to version 1.0.0 (in year 2025?).
    // This functionality will still be supported, but you may need to use an accessor method instead someday. Simple update.
}

function getStorageId() {
    return localStorage.getItem(LOCAL_STORAGE_KEY);
}

function storeHistoryState() {
    let storageId = getStorageIdForHistoryId(pizzaSm.vars.PizzaSm_history);
    localStorage.setItem(LOCAL_STORAGE_KEY, storageId);
}

function getStorageIdForHistoryId(historyId) {
    // You could use an actual map here instead if your language supports it.
    // This example is coded in a way that any language can roughly follow.
    for (let i = 0; i < mappingArray.length; i++) {
        const mappingElement = mappingArray[i];
        if (mappingElement.stateMachineHistoryId === historyId)
            return mappingElement.storageId;
    }

    console.error("Could not find storage id for history id '" + historyId + "'. You need to add a mapping to the `mappingArray`.");

    return null;
}

function getHistoryStateIdFromStorageId(storageId) {
    // You could use an actual map here instead if your language supports it.
    // This example is coded in a way that any language can roughly follow.
    for (let i = 0; i < mappingArray.length; i++) {
        const mappingElement = mappingArray[i];
        if (mappingElement.storageId === storageId)
            return mappingElement.stateMachineHistoryId;
    }

    console.error("Could not find history id for storage id '" + storageId + "'. You need to add a mapping to the `mappingArray`.");

    return 0; // 0 is the default history state transition shown in the StateSmith diagram.
}

function dispatchEventToSmSaveState(eventId) {
    pizzaSm.dispatchEvent(eventId);
    storeHistoryState();
    // NOTE! we save here (after dispatch) because it won't work as part of a state's entry handler.
    // This is because user enter event handler code happens before the history state is updated.
    // You can't do something like `enter / saveHistoryState()` because the history state is not updated yet.
}
