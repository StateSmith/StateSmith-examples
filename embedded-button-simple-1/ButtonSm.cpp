// Autogenerated with StateSmith 0.11.2-alpha+4a4e30018e9a371124530fa96cf2ba3322b80459.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#include "ButtonSm.h"
#include <stdbool.h> // required for `consume_event` flag
#include <string.h> // for memset

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
static void exit_up_to_state_handler(ButtonSm* sm, ButtonSm_Func desired_state_exit_handler);

static void ROOT_enter(ButtonSm* sm);

static void ROOT_exit(ButtonSm* sm);

static void PRESSED_DEBOUNCE_enter(ButtonSm* sm);

static void PRESSED_DEBOUNCE_exit(ButtonSm* sm);

static void PRESSED_DEBOUNCE_do(ButtonSm* sm);

static void PRESSED_STABLE_enter(ButtonSm* sm);

static void PRESSED_STABLE_exit(ButtonSm* sm);

static void PRESSED_STABLE_do(ButtonSm* sm);

static void CONFIRM_LONG_enter(ButtonSm* sm);

static void CONFIRM_LONG_exit(ButtonSm* sm);

static void CONFIRM_LONG_do(ButtonSm* sm);

static void PRESSED_LONG_enter(ButtonSm* sm);

static void PRESSED_LONG_exit(ButtonSm* sm);

static void PRESSED_LONG_do(ButtonSm* sm);

static void PRESSED_REPEAT_enter(ButtonSm* sm);

static void PRESSED_REPEAT_exit(ButtonSm* sm);

static void PRESSED_REPEAT_do(ButtonSm* sm);

static void RELEASED_DEBOUNCE_enter(ButtonSm* sm);

static void RELEASED_DEBOUNCE_exit(ButtonSm* sm);

static void RELEASED_DEBOUNCE_do(ButtonSm* sm);

static void RELEASED_STABLE_enter(ButtonSm* sm);

static void RELEASED_STABLE_exit(ButtonSm* sm);

static void RELEASED_STABLE_do(ButtonSm* sm);


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void ButtonSm_ctor(ButtonSm* sm)
{
    memset(sm, 0, sizeof(*sm));
}

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void ButtonSm_start(ButtonSm* sm)
{
    ROOT_enter(sm);
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: TransitionTo(RELEASED_DEBOUNCE)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `RELEASED_DEBOUNCE`.
            RELEASED_DEBOUNCE_enter(sm);
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            sm->state_id = ButtonSm_StateId_RELEASED_DEBOUNCE;
            // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
            return;
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
void ButtonSm_dispatch_event(ButtonSm* sm, ButtonSm_EventId event_id)
{
    ButtonSm_Func behavior_func = sm->current_event_handlers[event_id];
    
    while (behavior_func != NULL)
    {
        sm->ancestor_event_handler = NULL;
        behavior_func(sm);
        behavior_func = sm->ancestor_event_handler;
    }
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
static void exit_up_to_state_handler(ButtonSm* sm, ButtonSm_Func desired_state_exit_handler)
{
    while (sm->current_state_exit_handler != desired_state_exit_handler)
    {
        sm->current_state_exit_handler(sm);
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

static void ROOT_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = ROOT_exit;
}

static void ROOT_exit(ButtonSm* sm)
{
    // State machine root is a special case. It cannot be exited. Mark as unused.
    (void)sm;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state PRESSED_DEBOUNCE
////////////////////////////////////////////////////////////////////////////////

static void PRESSED_DEBOUNCE_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = PRESSED_DEBOUNCE_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_DEBOUNCE_do;
    
    // PRESSED_DEBOUNCE behavior
    // uml: enter / { timer_ms = 0; }
    {
        // Step 1: execute action `timer_ms = 0;`
        sm->vars.timer_ms = 0;
    } // end of behavior for PRESSED_DEBOUNCE
    
    // PRESSED_DEBOUNCE behavior
    // uml: enter / { output_press = 1; }
    {
        // Step 1: execute action `output_press = 1;`
        sm->vars.output_press = 1;
    } // end of behavior for PRESSED_DEBOUNCE
    
    // PRESSED_DEBOUNCE behavior
    // uml: enter / { output_press_event = 1; }
    {
        // Step 1: execute action `output_press_event = 1;`
        sm->vars.output_press_event = 1;
    } // end of behavior for PRESSED_DEBOUNCE
}

static void PRESSED_DEBOUNCE_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = NULL;  // no ancestor listens to this event
}

static void PRESSED_DEBOUNCE_do(ButtonSm* sm)
{
    // No ancestor state handles `do` event.
    
    // PRESSED_DEBOUNCE behavior
    // uml: do [timer_ms > 50] TransitionTo(PRESSED_STABLE)
    if (sm->vars.timer_ms > 50)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        PRESSED_DEBOUNCE_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `PRESSED_STABLE`.
        PRESSED_STABLE_enter(sm);
        
        // PRESSED_STABLE.<InitialState> behavior
        // uml: TransitionTo(CONFIRM_LONG)
        {
            // Step 1: Exit states until we reach `PRESSED_STABLE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CONFIRM_LONG`.
            CONFIRM_LONG_enter(sm);
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            sm->state_id = ButtonSm_StateId_CONFIRM_LONG;
            // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
            return;
        } // end of behavior for PRESSED_STABLE.<InitialState>
    } // end of behavior for PRESSED_DEBOUNCE
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state PRESSED_STABLE
////////////////////////////////////////////////////////////////////////////////

static void PRESSED_STABLE_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = PRESSED_STABLE_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_STABLE_do;
}

static void PRESSED_STABLE_exit(ButtonSm* sm)
{
    // PRESSED_STABLE behavior
    // uml: exit / { output_long = 0; }
    {
        // Step 1: execute action `output_long = 0;`
        sm->vars.output_long = 0;
    } // end of behavior for PRESSED_STABLE
    
    // PRESSED_STABLE behavior
    // uml: exit / { output_repeat = 0; }
    {
        // Step 1: execute action `output_repeat = 0;`
        sm->vars.output_repeat = 0;
    } // end of behavior for PRESSED_STABLE
    
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = NULL;  // no ancestor listens to this event
}

static void PRESSED_STABLE_do(ButtonSm* sm)
{
    // No ancestor state handles `do` event.
    
    // PRESSED_STABLE behavior
    // uml: do [! input_active] / { output_release_event = 1; } TransitionTo(RELEASED_DEBOUNCE)
    if (! sm->vars.input_active)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        exit_up_to_state_handler(sm, ROOT_exit);
        
        // Step 2: Transition action: `output_release_event = 1;`.
        sm->vars.output_release_event = 1;
        
        // Step 3: Enter/move towards transition target `RELEASED_DEBOUNCE`.
        RELEASED_DEBOUNCE_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = ButtonSm_StateId_RELEASED_DEBOUNCE;
        // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
        return;
    } // end of behavior for PRESSED_STABLE
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state CONFIRM_LONG
////////////////////////////////////////////////////////////////////////////////

static void CONFIRM_LONG_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = CONFIRM_LONG_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = CONFIRM_LONG_do;
    
    // CONFIRM_LONG behavior
    // uml: enter / { timer_ms = 0; }
    {
        // Step 1: execute action `timer_ms = 0;`
        sm->vars.timer_ms = 0;
    } // end of behavior for CONFIRM_LONG
}

static void CONFIRM_LONG_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = PRESSED_STABLE_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_STABLE_do;  // the next ancestor that handles this event is PRESSED_STABLE
}

static void CONFIRM_LONG_do(ButtonSm* sm)
{
    // Setup handler for next ancestor that listens to `do` event.
    sm->ancestor_event_handler = PRESSED_STABLE_do;
    
    // CONFIRM_LONG behavior
    // uml: do [timer_ms > 500] TransitionTo(PRESSED_LONG)
    if (sm->vars.timer_ms > 500)
    {
        // Step 1: Exit states until we reach `PRESSED_STABLE` state (Least Common Ancestor for transition).
        CONFIRM_LONG_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `PRESSED_LONG`.
        PRESSED_LONG_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = ButtonSm_StateId_PRESSED_LONG;
        sm->ancestor_event_handler = NULL;
        return;
    } // end of behavior for CONFIRM_LONG
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state PRESSED_LONG
////////////////////////////////////////////////////////////////////////////////

static void PRESSED_LONG_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = PRESSED_LONG_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_LONG_do;
    
    // PRESSED_LONG behavior
    // uml: enter / { timer_ms = 0; }
    {
        // Step 1: execute action `timer_ms = 0;`
        sm->vars.timer_ms = 0;
    } // end of behavior for PRESSED_LONG
    
    // PRESSED_LONG behavior
    // uml: enter / { output_long = 1; }
    {
        // Step 1: execute action `output_long = 1;`
        sm->vars.output_long = 1;
    } // end of behavior for PRESSED_LONG
    
    // PRESSED_LONG behavior
    // uml: enter / { output_long_event = 1; }
    {
        // Step 1: execute action `output_long_event = 1;`
        sm->vars.output_long_event = 1;
    } // end of behavior for PRESSED_LONG
}

static void PRESSED_LONG_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = PRESSED_STABLE_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_STABLE_do;  // the next ancestor that handles this event is PRESSED_STABLE
}

static void PRESSED_LONG_do(ButtonSm* sm)
{
    // Setup handler for next ancestor that listens to `do` event.
    sm->ancestor_event_handler = PRESSED_STABLE_do;
    
    // PRESSED_LONG behavior
    // uml: do [timer_ms > 350] TransitionTo(PRESSED_REPEAT)
    if (sm->vars.timer_ms > 350)
    {
        // Step 1: Exit states until we reach `PRESSED_STABLE` state (Least Common Ancestor for transition).
        PRESSED_LONG_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `PRESSED_REPEAT`.
        PRESSED_REPEAT_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = ButtonSm_StateId_PRESSED_REPEAT;
        sm->ancestor_event_handler = NULL;
        return;
    } // end of behavior for PRESSED_LONG
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state PRESSED_REPEAT
////////////////////////////////////////////////////////////////////////////////

static void PRESSED_REPEAT_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = PRESSED_REPEAT_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_REPEAT_do;
    
    // PRESSED_REPEAT behavior
    // uml: enter / { timer_ms = 0; }
    {
        // Step 1: execute action `timer_ms = 0;`
        sm->vars.timer_ms = 0;
    } // end of behavior for PRESSED_REPEAT
    
    // PRESSED_REPEAT behavior
    // uml: enter / { output_repeat = 1; }
    {
        // Step 1: execute action `output_repeat = 1;`
        sm->vars.output_repeat = 1;
    } // end of behavior for PRESSED_REPEAT
    
    // PRESSED_REPEAT behavior
    // uml: enter / { output_repeat_event = 1; }
    {
        // Step 1: execute action `output_repeat_event = 1;`
        sm->vars.output_repeat_event = 1;
    } // end of behavior for PRESSED_REPEAT
}

static void PRESSED_REPEAT_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = PRESSED_STABLE_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = PRESSED_STABLE_do;  // the next ancestor that handles this event is PRESSED_STABLE
}

static void PRESSED_REPEAT_do(ButtonSm* sm)
{
    // Setup handler for next ancestor that listens to `do` event.
    sm->ancestor_event_handler = PRESSED_STABLE_do;
    
    // PRESSED_REPEAT behavior
    // uml: do [timer_ms > 250] TransitionTo(PRESSED_REPEAT)
    if (sm->vars.timer_ms > 250)
    {
        // Step 1: Exit states until we reach `PRESSED_STABLE` state (Least Common Ancestor for transition).
        PRESSED_REPEAT_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `PRESSED_REPEAT`.
        PRESSED_REPEAT_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = ButtonSm_StateId_PRESSED_REPEAT;
        sm->ancestor_event_handler = NULL;
        return;
    } // end of behavior for PRESSED_REPEAT
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state RELEASED_DEBOUNCE
////////////////////////////////////////////////////////////////////////////////

static void RELEASED_DEBOUNCE_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = RELEASED_DEBOUNCE_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = RELEASED_DEBOUNCE_do;
    
    // RELEASED_DEBOUNCE behavior
    // uml: enter / { timer_ms = 0; }
    {
        // Step 1: execute action `timer_ms = 0;`
        sm->vars.timer_ms = 0;
    } // end of behavior for RELEASED_DEBOUNCE
    
    // RELEASED_DEBOUNCE behavior
    // uml: enter / { output_press = 0; }
    {
        // Step 1: execute action `output_press = 0;`
        sm->vars.output_press = 0;
    } // end of behavior for RELEASED_DEBOUNCE
}

static void RELEASED_DEBOUNCE_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = NULL;  // no ancestor listens to this event
}

static void RELEASED_DEBOUNCE_do(ButtonSm* sm)
{
    // No ancestor state handles `do` event.
    
    // RELEASED_DEBOUNCE behavior
    // uml: do [timer_ms > 50] TransitionTo(RELEASED_STABLE)
    if (sm->vars.timer_ms > 50)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        RELEASED_DEBOUNCE_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `RELEASED_STABLE`.
        RELEASED_STABLE_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = ButtonSm_StateId_RELEASED_STABLE;
        // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
        return;
    } // end of behavior for RELEASED_DEBOUNCE
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state RELEASED_STABLE
////////////////////////////////////////////////////////////////////////////////

static void RELEASED_STABLE_enter(ButtonSm* sm)
{
    // setup trigger/event handlers
    sm->current_state_exit_handler = RELEASED_STABLE_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = RELEASED_STABLE_do;
}

static void RELEASED_STABLE_exit(ButtonSm* sm)
{
    // adjust function pointers for this state's exit
    sm->current_state_exit_handler = ROOT_exit;
    sm->current_event_handlers[ButtonSm_EventId_DO] = NULL;  // no ancestor listens to this event
}

static void RELEASED_STABLE_do(ButtonSm* sm)
{
    // No ancestor state handles `do` event.
    
    // RELEASED_STABLE behavior
    // uml: do [input_active] TransitionTo(PRESSED_DEBOUNCE)
    if (sm->vars.input_active)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        RELEASED_STABLE_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `PRESSED_DEBOUNCE`.
        PRESSED_DEBOUNCE_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        sm->state_id = ButtonSm_StateId_PRESSED_DEBOUNCE;
        // No ancestor handles event. Can skip nulling `ancestor_event_handler`.
        return;
    } // end of behavior for RELEASED_STABLE
}

// Thread safe.
char const * ButtonSm_state_id_to_string(ButtonSm_StateId id)
{
    switch (id)
    {
        case ButtonSm_StateId_ROOT: return "ROOT";
        case ButtonSm_StateId_PRESSED_DEBOUNCE: return "PRESSED_DEBOUNCE";
        case ButtonSm_StateId_PRESSED_STABLE: return "PRESSED_STABLE";
        case ButtonSm_StateId_CONFIRM_LONG: return "CONFIRM_LONG";
        case ButtonSm_StateId_PRESSED_LONG: return "PRESSED_LONG";
        case ButtonSm_StateId_PRESSED_REPEAT: return "PRESSED_REPEAT";
        case ButtonSm_StateId_RELEASED_DEBOUNCE: return "RELEASED_DEBOUNCE";
        case ButtonSm_StateId_RELEASED_STABLE: return "RELEASED_STABLE";
        default: return "?";
    }
}

// Thread safe.
char const * ButtonSm_event_id_to_string(ButtonSm_EventId id)
{
    switch (id)
    {
        case ButtonSm_EventId_DO: return "DO";
        default: return "?";
    }
}
