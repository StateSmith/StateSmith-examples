// Autogenerated with StateSmith 0.17.5+57dc3b48c7efef521ed074679928caf1480daae8.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#include "LightSm.hpp"
#include <stdbool.h> // required for `consume_event` flag
#include <string.h> // for memset


// Starts the state machine. Must be called before dispatching events. Not thread safe.
void LightSm::start()
{
    ROOT_enter();
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `OFF`.
            OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `eventId` parameter is valid.
void LightSm::dispatchEvent(EventId eventId)
{
    
    switch (this->stateId)
    {
        // STATE: LightSm
        case StateId::ROOT:
            // state and ancestors have no handler for `toggle` event.
            break;
        
        // STATE: OFF
        case StateId::OFF:
            OFF_toggle(); 
            break;
        
        // STATE: ON
        case StateId::ON:
            ON_toggle(); 
            break;
    }
    
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
void LightSm::exitUpToStateHandler(StateId desiredState)
{
    while (this->stateId != desiredState)
    {
        switch (this->stateId)
        {
            case StateId::OFF: OFF_exit(); break;
            
            case StateId::ON: ON_exit(); break;
            
            default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

void LightSm::ROOT_enter()
{
    this->stateId = StateId::ROOT;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state OFF
////////////////////////////////////////////////////////////////////////////////

void LightSm::OFF_enter()
{
    this->stateId = StateId::OFF;
    
    // OFF behavior
    // uml: enter / { bulb.set(false); }
    {
        // Step 1: execute action `bulb.set(false);`
        this->vars.bulb.set(false);
    } // end of behavior for OFF
}

void LightSm::OFF_exit()
{
    this->stateId = StateId::ROOT;
}

void LightSm::OFF_toggle()
{
    // OFF behavior
    // uml: TOGGLE TransitionTo(ON)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        OFF_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ON`.
        ON_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for OFF
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ON
////////////////////////////////////////////////////////////////////////////////

void LightSm::ON_enter()
{
    this->stateId = StateId::ON;
    
    // ON behavior
    // uml: enter / { bulb.count++; }
    {
        // Step 1: execute action `bulb.count++;`
        this->vars.bulb.count++;
    } // end of behavior for ON
    
    // ON behavior
    // uml: enter / { bulb.set(true); }
    {
        // Step 1: execute action `bulb.set(true);`
        this->vars.bulb.set(true);
    } // end of behavior for ON
}

void LightSm::ON_exit()
{
    this->stateId = StateId::ROOT;
}

void LightSm::ON_toggle()
{
    // ON behavior
    // uml: TOGGLE TransitionTo(OFF)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        ON_exit();
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `OFF`.
        OFF_enter();
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for ON
    
    // No ancestor handles this event.
}

// Thread safe.
char const * LightSm::stateIdToString(StateId id)
{
    switch (id)
    {
        case StateId::ROOT: return "ROOT";
        case StateId::OFF: return "OFF";
        case StateId::ON: return "ON";
        default: return "?";
    }
}

// Thread safe.
char const * LightSm::eventIdToString(EventId id)
{
    switch (id)
    {
        case EventId::TOGGLE: return "TOGGLE";
        default: return "?";
    }
}
