@startuml ButtonSm

' //////////////////////// STATE ORGANIZATION ///////////////////////
' Note: StateSmith treats state names and events as case insensitive.
' More info: https://github.com/StateSmith/StateSmith/wiki/PlantUML

' note "Implements a simple `lock out` style debouncer.\nDetects: release, press, long, repeat" as N1

state RELEASED_DEBOUNCE
state RELEASED_STABLE {
    note "You could clear release event\nin exit handler if you wanted." as N2
}
state PRESSED_DEBOUNCE
state PRESSED_STABLE {
    [*] -> CONFIRM_LONG
    state CONFIRM_LONG
    state PRESSED_LONG
    state PRESSED_REPEAT
    ' note right of PRESSED_LONG
    '     Long press is still "active"
    '     while in repeat state so we
    '     clear the `output_long` flag
    '     in the parent exit handler.
    ' end note

    note "You could clear press events\nin exit handler if you wanted." as N3
}



' ///////////////////////// STATE HANDLERS /////////////////////////
' Syntax: https://github.com/StateSmith/StateSmith/wiki/Behaviors

' step 1: add states
' step 2: add transitions
' step 3: add code

[*] -> RELEASED_DEBOUNCE

RELEASED_DEBOUNCE: enter / timer_ms = 0;
RELEASED_DEBOUNCE: enter / output_press = 0;
RELEASED_DEBOUNCE -> RELEASED_STABLE: [timer_ms > 50]

' RELEASED_STABLE
' Just wait for press
RELEASED_STABLE --> PRESSED_DEBOUNCE: [input_active]

PRESSED_DEBOUNCE: enter / timer_ms = 0;
PRESSED_DEBOUNCE: enter / output_press = 1;
PRESSED_DEBOUNCE: enter / output_press_event = 1;
PRESSED_DEBOUNCE --> PRESSED_STABLE: [timer_ms > 50]

PRESSED_STABLE --> RELEASED_DEBOUNCE: [! input_active] / output_release_event = 1;
PRESSED_STABLE: exit / output_long = 0;
PRESSED_STABLE: exit / output_repeat = 0;

CONFIRM_LONG: enter / timer_ms = 0;
CONFIRM_LONG --> PRESSED_LONG: [timer_ms > 500]

PRESSED_LONG: enter / timer_ms = 0;
PRESSED_LONG: enter / output_long = 1;
PRESSED_LONG: enter / output_long_event = 1;
PRESSED_LONG --> PRESSED_REPEAT: [timer_ms > 350]

PRESSED_REPEAT: enter / timer_ms = 0;
PRESSED_REPEAT: enter / output_repeat = 1;
PRESSED_REPEAT: enter / output_repeat_event = 1;
PRESSED_REPEAT --> PRESSED_REPEAT: [timer_ms > 250]


' //////////////////////// StateSmith config ////////////////////////
' The below special comment block sets the StateSmith configuration.
' More info: https://github.com/StateSmith/StateSmith/issues/335

/'! $CONFIG : toml
SmRunnerSettings.transpilerId = "C99"

RenderConfig.C.HFileIncludes = """
    #include <stdint.h> // for state machine variables
    """
RenderConfig.C.CFileExtension = ".cpp"
RenderConfig.AutoExpandedVars = """
    // you need to add your loop time to this variable in your main loop.
    uint16_t timer_ms;

    // set to 1 when button is detected as active.
    uint8_t input_active: 1;
    
    // read and clear event flags in your main loop.
    uint8_t output_release_event: 1;
    uint8_t output_press_event: 1;
    uint8_t output_long_event: 1;
    uint8_t output_repeat_event: 1;

    // read these flags in your main loop, but don't clear them.
    // they are cleared automatically.
    uint8_t output_press: 1;
    uint8_t output_long: 1;
    uint8_t output_repeat: 1;
    """

RenderConfig.C.CEnumDeclarer = "typedef enum __attribute__((packed)) {enumName}" # smaller enumerations for gcc
'/
@enduml
