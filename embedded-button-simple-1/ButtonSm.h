// Autogenerated with StateSmith 0.11.2-alpha+4a4e30018e9a371124530fa96cf2ba3322b80459.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once
#include <stdint.h>

#include <stdint.h> // for state machine variables

typedef enum __attribute__((packed)) ButtonSm_EventId
{
    ButtonSm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
} ButtonSm_EventId;

enum
{
    ButtonSm_EventIdCount = 1
};

typedef enum __attribute__((packed)) ButtonSm_StateId
{
    ButtonSm_StateId_ROOT = 0,
    ButtonSm_StateId_PRESSED_DEBOUNCE = 1,
    ButtonSm_StateId_PRESSED_STABLE = 2,
    ButtonSm_StateId_CONFIRM_LONG = 3,
    ButtonSm_StateId_PRESSED_LONG = 4,
    ButtonSm_StateId_PRESSED_REPEAT = 5,
    ButtonSm_StateId_RELEASED_DEBOUNCE = 6,
    ButtonSm_StateId_RELEASED_STABLE = 7,
} ButtonSm_StateId;

enum
{
    ButtonSm_StateIdCount = 8
};


// Generated state machine
// forward declaration
typedef struct ButtonSm ButtonSm;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct ButtonSm_Vars
{
    // you need to add your loop time to this variable in your main loop.
    uint16_t timer_ms;
    
    // set to 1 when button is detected as active.
    uint8_t input_active: 1;
    
    // read and clear event flags in your main loop.
    uint8_t output_release_event: 1;
    uint8_t output_press_event: 1;
    uint8_t output_long_event: 1;
    uint8_t output_repeat_event: 1;
    
    // read these flags in your main loop, but don't clear them.
    // they are cleared automatically.
    uint8_t output_press: 1;
    uint8_t output_long: 1;
    uint8_t output_repeat: 1;
} ButtonSm_Vars;


// event handler type
typedef void (*ButtonSm_Func)(ButtonSm* sm);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void ButtonSm_ctor(ButtonSm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void ButtonSm_start(ButtonSm* sm);

// Dispatches an event to the state machine. Not thread safe.
void ButtonSm_dispatch_event(ButtonSm* sm, ButtonSm_EventId event_id);

// Thread safe.
char const * ButtonSm_state_id_to_string(ButtonSm_StateId id);

// Thread safe.
char const * ButtonSm_event_id_to_string(ButtonSm_EventId id);

// Generated state machine
struct ButtonSm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    ButtonSm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    ButtonSm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    ButtonSm_Func current_event_handlers[ButtonSm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    ButtonSm_Func current_state_exit_handler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    ButtonSm_Vars vars;
};

