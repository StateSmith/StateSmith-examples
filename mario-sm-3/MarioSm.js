// Autogenerated with StateSmith 0.12.0-alpha+99dbe30d387ec88bb0e251bea536ac8980235987.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class MarioSm
{
    static EventId = 
    {
        DO : 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
        CRUSH : 1,
        FEATHER : 2,
        FIRE_FLOWER : 3,
        HIT : 4,
        MUSHROOM : 5,
        STAR : 6,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 7;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        DEFEAT : 1,
        INVINCIBLE : 2,
        REGULAR : 3,
        CAPE : 4,
        FIRE : 5,
        SMALL : 6,
        SUPER : 7,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 8;
    static { Object.freeze(this.StateIdCount); }
    
    static REGULAR_HistoryId = 
    {
        SMALL : 0, // default transition
        SUPER : 1,
        CAPE : 2,
        FIRE : 3,
    }
    static { Object.freeze(this.REGULAR_HistoryId); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(MarioSm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        REGULAR_history: undefined,
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(REGULAR)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `REGULAR`.
                this.#REGULAR_enter();
                
                // REGULAR.<InitialState> behavior
                // uml: TransitionTo(SMALL)
                {
                    // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: ``.
                    
                    // Step 3: Enter/move towards transition target `SMALL`.
                    this.#SMALL_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    this.stateId = MarioSm.StateId.SMALL;
                    // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                    return;
                } // end of behavior for REGULAR.<InitialState>
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    #ROOT_exit()
    {
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DEFEAT
    ////////////////////////////////////////////////////////////////////////////////
    
    #DEFEAT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#DEFEAT_exit;
        this.#currentEventHandlers[MarioSm.EventId.MUSHROOM] = this.#DEFEAT_mushroom;
        
        // DEFEAT behavior
        // uml: enter / { defeatedMario(); }
        {
            // Step 1: execute action `defeatedMario();`
            defeatedMario();
        } // end of behavior for DEFEAT
    }
    
    #DEFEAT_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[MarioSm.EventId.MUSHROOM] = null;  // no ancestor listens to this event
    }
    
    #DEFEAT_mushroom()
    {
        // No ancestor state handles `mushroom` event.
        
        // DEFEAT behavior
        // uml: MUSHROOM TransitionTo(SMALL)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#DEFEAT_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SMALL`.
            this.#REGULAR_enter();
            this.#SMALL_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.SMALL;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for DEFEAT
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state INVINCIBLE
    ////////////////////////////////////////////////////////////////////////////////
    
    #INVINCIBLE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#INVINCIBLE_exit;
        this.#currentEventHandlers[MarioSm.EventId.DO] = this.#INVINCIBLE_do;
        
        // INVINCIBLE behavior
        // uml: enter / { starMario(); }
        {
            // Step 1: execute action `starMario();`
            starMario();
        } // end of behavior for INVINCIBLE
        
        // INVINCIBLE behavior
        // uml: enter / { startStarTimer(); }
        {
            // Step 1: execute action `startStarTimer();`
            startStarTimer();
        } // end of behavior for INVINCIBLE
    }
    
    #INVINCIBLE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[MarioSm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #INVINCIBLE_do()
    {
        // No ancestor state handles `do` event.
        
        // INVINCIBLE behavior
        // uml: do [isStarExpired()] TransitionTo(REGULAR.<History>)
        if (isStarExpired())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#INVINCIBLE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `REGULAR.<History>`.
            this.#REGULAR_enter();
            // REGULAR.<History> is a pseudo state and cannot have an `enter` trigger.
            
            // REGULAR.<History> behavior
            // uml: [$gil(this.vars.REGULAR_history == REGULAR_HistoryId.SUPER)] TransitionTo(SUPER)
            if (this.vars.REGULAR_history == MarioSm.REGULAR_HistoryId.SUPER)
            {
                // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `SUPER`.
                this.#SUPER_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = MarioSm.StateId.SUPER;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for REGULAR.<History>
            
            // REGULAR.<History> behavior
            // uml: [$gil(this.vars.REGULAR_history == REGULAR_HistoryId.CAPE)] TransitionTo(CAPE)
            if (this.vars.REGULAR_history == MarioSm.REGULAR_HistoryId.CAPE)
            {
                // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `CAPE`.
                this.#CAPE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = MarioSm.StateId.CAPE;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for REGULAR.<History>
            
            // REGULAR.<History> behavior
            // uml: [$gil(this.vars.REGULAR_history == REGULAR_HistoryId.FIRE)] TransitionTo(FIRE)
            if (this.vars.REGULAR_history == MarioSm.REGULAR_HistoryId.FIRE)
            {
                // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `FIRE`.
                this.#FIRE_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = MarioSm.StateId.FIRE;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for REGULAR.<History>
            
            // REGULAR.<History> behavior
            // uml: else TransitionTo(SMALL)
            {
                // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `SMALL`.
                this.#SMALL_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = MarioSm.StateId.SMALL;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for REGULAR.<History>
        } // end of behavior for INVINCIBLE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state REGULAR
    ////////////////////////////////////////////////////////////////////////////////
    
    #REGULAR_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#REGULAR_exit;
        this.#currentEventHandlers[MarioSm.EventId.CRUSH] = this.#REGULAR_crush;
        this.#currentEventHandlers[MarioSm.EventId.STAR] = this.#REGULAR_star;
    }
    
    #REGULAR_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[MarioSm.EventId.CRUSH] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.STAR] = null;  // no ancestor listens to this event
    }
    
    #REGULAR_crush()
    {
        // No ancestor state handles `crush` event.
        
        // REGULAR behavior
        // uml: CRUSH TransitionTo(DEFEAT)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `DEFEAT`.
            this.#DEFEAT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.DEFEAT;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for REGULAR
    }
    
    #REGULAR_star()
    {
        // No ancestor state handles `star` event.
        
        // REGULAR behavior
        // uml: STAR TransitionTo(INVINCIBLE)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `INVINCIBLE`.
            this.#INVINCIBLE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.INVINCIBLE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for REGULAR
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CAPE
    ////////////////////////////////////////////////////////////////////////////////
    
    #CAPE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CAPE_exit;
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = this.#CAPE_fire_flower;
        this.#currentEventHandlers[MarioSm.EventId.HIT] = this.#CAPE_hit;
        
        // CAPE behavior
        // uml: enter / { capeMario(); }
        {
            // Step 1: execute action `capeMario();`
            capeMario();
        } // end of behavior for CAPE
        
        // CAPE behavior
        // uml: enter / { $gil(this.vars.REGULAR_history = REGULAR_HistoryId.CAPE;) }
        {
            // Step 1: execute action `$gil(this.vars.REGULAR_history = REGULAR_HistoryId.CAPE;)`
            this.vars.REGULAR_history = MarioSm.REGULAR_HistoryId.CAPE;
        } // end of behavior for CAPE
    }
    
    #CAPE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#REGULAR_exit;
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.HIT] = null;  // no ancestor listens to this event
    }
    
    #CAPE_fire_flower()
    {
        // No ancestor state handles `fire_flower` event.
        
        // CAPE behavior
        // uml: FIRE_FLOWER TransitionTo(FIRE)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#CAPE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `FIRE`.
            this.#FIRE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.FIRE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CAPE
    }
    
    #CAPE_hit()
    {
        // No ancestor state handles `hit` event.
        
        // CAPE behavior
        // uml: HIT TransitionTo(SUPER)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#CAPE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SUPER`.
            this.#SUPER_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.SUPER;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CAPE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state FIRE
    ////////////////////////////////////////////////////////////////////////////////
    
    #FIRE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#FIRE_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = this.#FIRE_feather;
        this.#currentEventHandlers[MarioSm.EventId.HIT] = this.#FIRE_hit;
        
        // FIRE behavior
        // uml: enter / { fireMario(); }
        {
            // Step 1: execute action `fireMario();`
            fireMario();
        } // end of behavior for FIRE
        
        // FIRE behavior
        // uml: enter / { $gil(this.vars.REGULAR_history = REGULAR_HistoryId.FIRE;) }
        {
            // Step 1: execute action `$gil(this.vars.REGULAR_history = REGULAR_HistoryId.FIRE;)`
            this.vars.REGULAR_history = MarioSm.REGULAR_HistoryId.FIRE;
        } // end of behavior for FIRE
    }
    
    #FIRE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#REGULAR_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.HIT] = null;  // no ancestor listens to this event
    }
    
    #FIRE_feather()
    {
        // No ancestor state handles `feather` event.
        
        // FIRE behavior
        // uml: FEATHER TransitionTo(CAPE)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#FIRE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CAPE`.
            this.#CAPE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.CAPE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for FIRE
    }
    
    #FIRE_hit()
    {
        // No ancestor state handles `hit` event.
        
        // FIRE behavior
        // uml: HIT TransitionTo(SUPER)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#FIRE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SUPER`.
            this.#SUPER_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.SUPER;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for FIRE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SMALL
    ////////////////////////////////////////////////////////////////////////////////
    
    #SMALL_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#SMALL_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = this.#SMALL_feather;
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = this.#SMALL_fire_flower;
        this.#currentEventHandlers[MarioSm.EventId.HIT] = this.#SMALL_hit;
        this.#currentEventHandlers[MarioSm.EventId.MUSHROOM] = this.#SMALL_mushroom;
        
        // SMALL behavior
        // uml: enter / { smallMario(); }
        {
            // Step 1: execute action `smallMario();`
            smallMario();
        } // end of behavior for SMALL
        
        // SMALL behavior
        // uml: enter / { $gil(this.vars.REGULAR_history = REGULAR_HistoryId.SMALL;) }
        {
            // Step 1: execute action `$gil(this.vars.REGULAR_history = REGULAR_HistoryId.SMALL;)`
            this.vars.REGULAR_history = MarioSm.REGULAR_HistoryId.SMALL;
        } // end of behavior for SMALL
    }
    
    #SMALL_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#REGULAR_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.HIT] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.MUSHROOM] = null;  // no ancestor listens to this event
    }
    
    #SMALL_feather()
    {
        // No ancestor state handles `feather` event.
        
        // SMALL behavior
        // uml: FEATHER TransitionTo(CAPE)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#SMALL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CAPE`.
            this.#CAPE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.CAPE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SMALL
    }
    
    #SMALL_fire_flower()
    {
        // No ancestor state handles `fire_flower` event.
        
        // SMALL behavior
        // uml: FIRE_FLOWER TransitionTo(FIRE)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#SMALL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `FIRE`.
            this.#FIRE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.FIRE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SMALL
    }
    
    #SMALL_hit()
    {
        // No ancestor state handles `hit` event.
        
        // SMALL behavior
        // uml: HIT TransitionTo(DEFEAT)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `DEFEAT`.
            this.#DEFEAT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.DEFEAT;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SMALL
    }
    
    #SMALL_mushroom()
    {
        // No ancestor state handles `mushroom` event.
        
        // SMALL behavior
        // uml: MUSHROOM TransitionTo(SUPER)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#SMALL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SUPER`.
            this.#SUPER_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.SUPER;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SMALL
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SUPER
    ////////////////////////////////////////////////////////////////////////////////
    
    #SUPER_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#SUPER_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = this.#SUPER_feather;
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = this.#SUPER_fire_flower;
        this.#currentEventHandlers[MarioSm.EventId.HIT] = this.#SUPER_hit;
        
        // SUPER behavior
        // uml: enter / { superMario(); }
        {
            // Step 1: execute action `superMario();`
            superMario();
        } // end of behavior for SUPER
        
        // SUPER behavior
        // uml: enter / { $gil(this.vars.REGULAR_history = REGULAR_HistoryId.SUPER;) }
        {
            // Step 1: execute action `$gil(this.vars.REGULAR_history = REGULAR_HistoryId.SUPER;)`
            this.vars.REGULAR_history = MarioSm.REGULAR_HistoryId.SUPER;
        } // end of behavior for SUPER
    }
    
    #SUPER_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#REGULAR_exit;
        this.#currentEventHandlers[MarioSm.EventId.FEATHER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.FIRE_FLOWER] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[MarioSm.EventId.HIT] = null;  // no ancestor listens to this event
    }
    
    #SUPER_feather()
    {
        // No ancestor state handles `feather` event.
        
        // SUPER behavior
        // uml: FEATHER TransitionTo(CAPE)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#SUPER_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CAPE`.
            this.#CAPE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.CAPE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SUPER
    }
    
    #SUPER_fire_flower()
    {
        // No ancestor state handles `fire_flower` event.
        
        // SUPER behavior
        // uml: FIRE_FLOWER TransitionTo(FIRE)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#SUPER_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `FIRE`.
            this.#FIRE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.FIRE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SUPER
    }
    
    #SUPER_hit()
    {
        // No ancestor state handles `hit` event.
        
        // SUPER behavior
        // uml: HIT TransitionTo(SMALL)
        {
            // Step 1: Exit states until we reach `REGULAR` state (Least Common Ancestor for transition).
            this.#SUPER_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SMALL`.
            this.#SMALL_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = MarioSm.StateId.SMALL;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SUPER
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case MarioSm.StateId.ROOT: return "ROOT";
            case MarioSm.StateId.DEFEAT: return "DEFEAT";
            case MarioSm.StateId.INVINCIBLE: return "INVINCIBLE";
            case MarioSm.StateId.REGULAR: return "REGULAR";
            case MarioSm.StateId.CAPE: return "CAPE";
            case MarioSm.StateId.FIRE: return "FIRE";
            case MarioSm.StateId.SMALL: return "SMALL";
            case MarioSm.StateId.SUPER: return "SUPER";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case MarioSm.EventId.CRUSH: return "CRUSH";
            case MarioSm.EventId.DO: return "DO";
            case MarioSm.EventId.FEATHER: return "FEATHER";
            case MarioSm.EventId.FIRE_FLOWER: return "FIRE_FLOWER";
            case MarioSm.EventId.HIT: return "HIT";
            case MarioSm.EventId.MUSHROOM: return "MUSHROOM";
            case MarioSm.EventId.STAR: return "STAR";
            default: return "?";
        }
    }
}
